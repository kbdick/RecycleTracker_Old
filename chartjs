
    var data = [{"landfill":41.0,"recycling":36.0,"date":"Tue Feb 04"},{"landfill":52.0,"recycling":20.0,"date":"Tue Feb 05"},{"landfill":71.0,"recycling":13.0,"date":"Tue Feb 06"},{"landfill":55.0,"recycling":44.0,"date":"Tue Feb 07"},{"landfill":66.0,"recycling":36.0,"date":"Tue Feb 08"},{"landfill":80.0,"recycling":44.0,"date":"Tue Feb 09"},{"landfill":50.0,"recycling":22.0,"date":"Tue Feb 10"},{"landfill":77.0,"recycling":22.0,"date":"Tue Feb 11"},{"landfill":55.0,"recycling":44.0,"date":"Tue Feb 12"},{"landfill":99.0,"recycling":66.0,"date":"Tue Feb 13"},{"landfill":100.0,"recycling":66.0,"date":"Tue Feb 14"},{"landfill":55.0,"recycling":41.0,"date":"Tue Feb 15"}];;
    if(data != 0){

        var padding = {top: 30, right: 40, bottom: 40, left: 40};
        var parseDate = d3.time.format("%a %b %d").parse;
        var sourceData, xScale, yScale, line;
        var prevChartWidth = 0, prevChartHeight = 0;
        var updateTransistionMS = 750;

        var chartSvg = d3.select("#chartContainer").append("svg")
                .append("g")
                .attr("class", "chartContainer")
                .attr("transform", "translate(" + padding.left + "," + padding.top + ")");

        chartSvg.append("g")
                .attr("class", "x axis");

        chartSvg.append("g")
                .attr("class", "y axis");



        data.forEach(function(d) {
            d.date = parseDate(d.date);
            d.weight = +d.weight;
        });

        sourceData = data;

        xScale = d3.time.scale()
                .domain(d3.extent(sourceData, function(d) { return d.date; }));

        yScale = d3.scale.linear()
                .domain([0, d3.max(sourceData, function(d) { return d.weight; })]);

        xAxis = d3.svg.axis()
                .scale(xScale)
                .orient("bottom");

        yAxis = d3.svg.axis()
                .scale(yScale)
                .orient("left");

        // declare a new line
        line = d3.svg.line()
                .x(function(d) { return xScale(d.date); })
                .y(function(d) { return yScale(d.weight); })
                .interpolate("linear");

        updateChart(true);
        function updateChart(init)
        {
            var chartWidth = document.getElementById('chartContainer').getBoundingClientRect().width - padding.left - padding.right;
            var chartHeight = document.getElementById('chartContainer').getBoundingClientRect().height - padding.top - padding.bottom;

            if ((prevChartWidth != chartWidth) ||
                    (prevChartHeight != chartHeight))
            {
                prevChartWidth = chartWidth;
                prevChartHeight = chartHeight;

                chartSvg.attr("width", chartWidth + padding.left + padding.right)
                        .attr("height", chartHeight + padding.top + padding.bottom);

                xScale.range([0, chartWidth]);
                yScale.range([chartHeight, 0]);

                if (init)
                {

                    chartSvg.select(".x")
                            .attr("transform", "translate(0," + chartHeight + ")")
                            .call(xAxis);

                    chartSvg.select(".y")
                            .call(yAxis);
                }
                else
                {
                    var t = chartSvg.transition().duration(updateTransistionMS);

                    t.select(".x")
                            .attr("transform", "translate(0," + chartHeight + ")")
                            .call(xAxis);

                    t.select(".y")
                            .call(yAxis);
                }

                var circle = chartSvg.selectAll("circle")
                        .data(sourceData);

                circle.transition()
                        .duration(updateTransistionMS)
                        .attr("cx", function(d) { return xScale(d.date); })
                        .attr("cy", function(d) { return yScale(d.weight); });

                circle.enter().append("circle")
                        .attr("cx", function(d) { return xScale(d.date); })
                        .attr("cy", function(d) { return yScale(d.weight); })
                        .attr("r", 3)
                        .attr("class", "circle");

                var lines = chartSvg.selectAll(".line")
                        .data([sourceData]);

                lines.transition()
                        .duration(updateTransistionMS)
                        .attr("d", line);

                lines.enter().append("path")
                        .attr("class", "line")
                        .attr("d", line);
            }
        }

        var resizeTimer;
        window.onresize = function(event) {
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(function()
            {
                updateChart(false);
            }, 100);
        }

        function mousemove() {
            var x0 = x.invert(d3.mouse(this)[0]),
                    i = bisectDate(data, x0, 1),
                    d0 = data[i - 1],
                    d1 = data[i],
                    d = x0 - d0.date > d1.date - x0 ? d1 : d0;
            focus.attr("transform", "translate(" + x(d.date) + "," + y(d.weight) + ")");
            focus.select("text").text(formatCurrency(d.weight));
        }
    }

    (function($) {
        $(document).ready(function() {
            $.slidebars();
        });
    }) (jQuery);
</script>